{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const todosApi = createApi({\n  reducerPath: 'todosApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/',\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  endpoints: builder => ({\n    getTodos: builder.query({\n      query: () => 'get-todos'\n    }),\n    createTodo: builder.mutation({\n      query: newTodo => ({\n        url: 'add-todo',\n        method: 'POST',\n        body: newTodo\n      })\n    }),\n    updateTaskStatus: builder.mutation({\n      query: _ref => {\n        let {\n          todoId,\n          taskId\n        } = _ref;\n        return {\n          url: `update-task-status/todo/${todoId}/task/${taskId}`,\n          method: 'PUT'\n        };\n      }\n    }),\n    updateTodoTitle: builder.mutation({\n      query: _ref2 => {\n        let {\n          todoId,\n          newTitle\n        } = _ref2;\n        return {\n          url: `update-todo-title/${todoId}`,\n          method: 'PUT',\n          body: {\n            newTitle\n          }\n        };\n      }\n    }),\n    addTask: builder.mutation({\n      query: _ref3 => {\n        let {\n          todoId,\n          newTask\n        } = _ref3;\n        return {\n          url: `add-task/${todoId}`,\n          method: 'PUT',\n          body: newTask\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetTodosQuery,\n  useCreateTodoMutation,\n  useUpdateTaskStatusMutation,\n  useUpdateTodoTitleMutation,\n  useAddTaskMutation\n} = todosApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","todosApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","endpoints","builder","getTodos","query","createTodo","mutation","newTodo","url","method","body","updateTaskStatus","_ref","todoId","taskId","updateTodoTitle","_ref2","newTitle","addTask","_ref3","newTask","useGetTodosQuery","useCreateTodoMutation","useUpdateTaskStatusMutation","useUpdateTodoTitleMutation","useAddTaskMutation"],"sources":["C:/Users/Taha/Desktop/MERN-todo-case-project/frontend/src/api/todosApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { Todo} from '../types/Todo';\r\nimport { Task } from '../types/Task';\r\n\r\nexport const todosApi = createApi({\r\n  reducerPath: 'todosApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000/',\r\n    prepareHeaders: (headers) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            headers.set('authorization', `Bearer ${token}`);\r\n        }\r\n        return headers;\r\n        }\r\n\r\n},\r\n    \r\n  ),\r\n  endpoints: (builder) => ({\r\n    getTodos: builder.query<Todo[], any>({\r\n      query: () => 'get-todos',\r\n\r\n      \r\n    }),\r\n    createTodo: builder.mutation<Todo, Partial<Todo>>({\r\n      query: (newTodo) => ({\r\n        url: 'add-todo',\r\n        method: 'POST',\r\n        body: newTodo,\r\n      }),\r\n    }),\r\n    updateTaskStatus: builder.mutation<Todo, { todoId: string, taskId: string }>({\r\n      query: ({ todoId, taskId }) => ({\r\n        url: `update-task-status/todo/${todoId}/task/${taskId}`,\r\n        method: 'PUT',\r\n      }),\r\n    }),\r\n    updateTodoTitle: builder.mutation<Todo, { todoId: string, newTitle: string }>({\r\n      query: ({ todoId, newTitle }) => ({\r\n        url: `update-todo-title/${todoId}`,\r\n        method: 'PUT',\r\n        body: { newTitle }, \r\n      }),\r\n    }),\r\n    addTask: builder.mutation<Todo, { todoId: string, newTask: Task }>({\r\n      query: ({ todoId, newTask }) => ({\r\n        url: `add-task/${todoId}`,\r\n        method: 'PUT',\r\n        body: newTask,\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetTodosQuery, useCreateTodoMutation, useUpdateTaskStatusMutation, useUpdateTodoTitleMutation, useAddTaskMutation } = todosApi;\r\n\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAIxE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE,wBAAwB;IAC3DC,cAAc,EAAGC,OAAO,IAAK;MACzB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACPD,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASH,KAAM,EAAC,CAAC;MACnD;MACA,OAAOD,OAAO;IACd;EAER,CAEE,CAAC;EACDK,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAc;MACnCA,KAAK,EAAEA,CAAA,KAAM;IAGf,CAAC,CAAC;IACFC,UAAU,EAAEH,OAAO,CAACI,QAAQ,CAAsB;MAChDF,KAAK,EAAGG,OAAO,KAAM;QACnBC,GAAG,EAAE,UAAU;QACfC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC;IACH,CAAC,CAAC;IACFI,gBAAgB,EAAET,OAAO,CAACI,QAAQ,CAA2C;MAC3EF,KAAK,EAAEQ,IAAA;QAAA,IAAC;UAAEC,MAAM;UAAEC;QAAO,CAAC,GAAAF,IAAA;QAAA,OAAM;UAC9BJ,GAAG,EAAG,2BAA0BK,MAAO,SAAQC,MAAO,EAAC;UACvDL,MAAM,EAAE;QACV,CAAC;MAAA;IACH,CAAC,CAAC;IACFM,eAAe,EAAEb,OAAO,CAACI,QAAQ,CAA6C;MAC5EF,KAAK,EAAEY,KAAA;QAAA,IAAC;UAAEH,MAAM;UAAEI;QAAS,CAAC,GAAAD,KAAA;QAAA,OAAM;UAChCR,GAAG,EAAG,qBAAoBK,MAAO,EAAC;UAClCJ,MAAM,EAAE,KAAK;UACbC,IAAI,EAAE;YAAEO;UAAS;QACnB,CAAC;MAAA;IACH,CAAC,CAAC;IACFC,OAAO,EAAEhB,OAAO,CAACI,QAAQ,CAA0C;MACjEF,KAAK,EAAEe,KAAA;QAAA,IAAC;UAAEN,MAAM;UAAEO;QAAQ,CAAC,GAAAD,KAAA;QAAA,OAAM;UAC/BX,GAAG,EAAG,YAAWK,MAAO,EAAC;UACzBJ,MAAM,EAAE,KAAK;UACbC,IAAI,EAAEU;QACR,CAAC;MAAA;IACH,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,gBAAgB;EAAEC,qBAAqB;EAAEC,2BAA2B;EAAEC,0BAA0B;EAAEC;AAAmB,CAAC,GAAGlC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}