{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: 'http://localhost:5000',\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().token;\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`);\n    }\n    return headers;\n  }\n});\nexport const authApi = createApi({\n  reducerPath: 'authApi',\n  baseQuery,\n  endpoints: builder => ({\n    loginUser: builder.mutation({\n      query: body => ({\n        url: '/login',\n        method: 'POST',\n        body,\n        prepareHeaders: headers => {\n          headers.set('content-type', 'application/json');\n          return headers;\n        }\n      })\n    })\n  })\n});\nexport const {\n  useLoginUserMutation\n} = authApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","baseQuery","baseUrl","prepareHeaders","headers","_ref","getState","token","set","authApi","reducerPath","endpoints","builder","loginUser","mutation","query","body","url","method","useLoginUserMutation"],"sources":["C:/Users/Taha/Desktop/MERN-todo-case-project/frontend/src/api/authApi.ts"],"sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\nimport { RootState } from '../redux/store';\r\n\r\n\r\ninterface RootStateWithAuth extends RootState {\r\n   token: string;\r\n}\r\n\r\n\r\n\r\n\r\nconst baseQuery = fetchBaseQuery({baseUrl: 'http://localhost:5000',\r\n    prepareHeaders: (headers, {getState}) => {\r\n        const token = (getState() as RootStateWithAuth).token;\r\n        if (token) {\r\n            \r\n            headers.set('authorization', `Bearer ${token}`);\r\n            \r\n        }\r\n        return headers;\r\n    },\r\n});\r\n\r\n\r\nexport interface AuthResponse {\r\n    token: string;\r\n    message : string;\r\n}\r\n\r\n\r\n\r\n\r\nexport const authApi = createApi({\r\n    reducerPath: 'authApi',\r\n    baseQuery,\r\n    endpoints: (builder) => ({\r\n        loginUser : builder.mutation<AuthResponse, { email: string, password: string }>({\r\n            query: (body: {email: string, password: string}) => ({\r\n                url: '/login',\r\n                method: 'POST',\r\n                body,\r\n                prepareHeaders: (headers\r\n                    ) => {\r\n                    headers.set('content-type', 'application/json');\r\n                    return headers;\r\n                }\r\n\r\n\r\n            }),\r\n        }),\r\n        \r\n\r\n    }),\r\n});\r\n\r\nexport const {useLoginUserMutation} = authApi;\r\n\r\n\r\n"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,cAAc,QAAO,8BAA8B;AAWtE,MAAMC,SAAS,GAAGD,cAAc,CAAC;EAACE,OAAO,EAAE,uBAAuB;EAC9DC,cAAc,EAAEA,CAACC,OAAO,EAAAC,IAAA,KAAiB;IAAA,IAAf;MAACC;IAAQ,CAAC,GAAAD,IAAA;IAChC,MAAME,KAAK,GAAID,QAAQ,CAAC,CAAC,CAAuBC,KAAK;IACrD,IAAIA,KAAK,EAAE;MAEPH,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASD,KAAM,EAAC,CAAC;IAEnD;IACA,OAAOH,OAAO;EAClB;AACJ,CAAC,CAAC;AAWF,OAAO,MAAMK,OAAO,GAAGV,SAAS,CAAC;EAC7BW,WAAW,EAAE,SAAS;EACtBT,SAAS;EACTU,SAAS,EAAGC,OAAO,KAAM;IACrBC,SAAS,EAAGD,OAAO,CAACE,QAAQ,CAAoD;MAC5EC,KAAK,EAAGC,IAAuC,KAAM;QACjDC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QACdF,IAAI;QACJb,cAAc,EAAGC,OAAO,IACf;UACLA,OAAO,CAACI,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;UAC/C,OAAOJ,OAAO;QAClB;MAGJ,CAAC;IACL,CAAC;EAGL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAACe;AAAoB,CAAC,GAAGV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}