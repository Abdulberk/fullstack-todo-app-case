{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initalState = {\n  todos: []\n};\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: initalState,\n  reducers: {\n    setTodos: (state, action) => {\n      state.todos = action.payload;\n    },\n    addTodo: (state, action) => {\n      state.todos.push(action.payload);\n    },\n    deleteTodo: (state, action) => {\n      state.todos = state.todos.filter(todo => todo._id !== action.payload);\n    },\n    updateTask: (state, action) => {\n      const {\n        todoId,\n        taskId,\n        completed\n      } = action.payload;\n      const getTodo = state.todos.find(todo => todo._id === todoId);\n      if (getTodo) {\n        const getTask = getTodo.tasks.find(task => task._id === taskId);\n        if (getTask) {\n          getTask.completed = completed;\n        }\n      }\n    },\n    addTask: (state, action) => {\n      const {\n        todoId,\n        taskId,\n        text\n      } = action.payload;\n      const getTodo = state.todos.find(todo => todo._id === todoId);\n      if (getTodo) {\n        getTodo.tasks.push({\n          _id: taskId,\n          text,\n          completed: false,\n          todo: todoId\n        });\n      }\n    },\n    deleteTask: (state, action) => {\n      const {\n        todoId,\n        taskId\n      } = action.payload;\n      const getTodo = state.todos.find(todo => todo._id === todoId);\n      if (getTodo) {\n        getTodo.tasks = getTodo.tasks.filter(task => task._id !== taskId);\n      }\n    },\n    updateTodoTitle: (state, action) => {\n      const {\n        todoId,\n        newTitle\n      } = action.payload;\n      const getTodo = state.todos.find(todo => todo._id === todoId);\n      if (getTodo) {\n        getTodo.title = newTitle;\n      }\n    }\n  }\n});\nexport const {\n  setTodos,\n  addTodo,\n  deleteTodo,\n  updateTask,\n  addTask,\n  deleteTask,\n  updateTodoTitle\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","initalState","todos","todosSlice","name","initialState","reducers","setTodos","state","action","payload","addTodo","push","deleteTodo","filter","todo","_id","updateTask","todoId","taskId","completed","getTodo","find","getTask","tasks","task","addTask","text","deleteTask","updateTodoTitle","newTitle","title","actions","reducer"],"sources":["C:/Users/Taha/Desktop/MERN-todo-case-project/frontend/src/redux/slices/todoSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Todo } from \"../../types/Todo\";\r\nimport { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Task } from \"../../types/Task\";\r\n\r\n\r\nconst initalState = {\r\n    todos: [],\r\n\r\n} as { todos: Todo[] }\r\n\r\n\r\nconst todosSlice = createSlice({\r\n    name: 'todos',\r\n    initialState: initalState,\r\n    reducers: {\r\n        setTodos: (state, action) => { \r\n            state.todos = action.payload\r\n        },\r\n        addTodo: (state, action : PayloadAction<Todo>) => {\r\n            state.todos.push(action.payload) \r\n\r\n        }\r\n        ,\r\n        deleteTodo: (state, action) => {\r\n            state.todos = state.todos.filter((todo:Todo) => todo._id !== action.payload)\r\n        },\r\n        updateTask: (state,action:PayloadAction<{todoId:string, taskId:string, completed:Task[\"completed\"]}>) => {\r\n            const {todoId, taskId, completed} = action.payload\r\n            const getTodo = state.todos.find((todo:Todo) => todo._id === todoId) \r\n            if (getTodo) {\r\n                const getTask = getTodo.tasks.find((task:Task) => task._id === taskId) \r\n\r\n                if (getTask) {\r\n                    getTask.completed = completed;\r\n                }\r\n            }\r\n\r\n        },\r\n        addTask: (state, action : PayloadAction<{todoId:string, taskId:string, text:string}>) => {\r\n                const {todoId, taskId, text} = action.payload\r\n                const getTodo = state.todos.find((todo: Todo) => todo._id === todoId)\r\n\r\n                if (getTodo) {\r\n                    getTodo.tasks.push({\r\n                        _id: taskId,\r\n                        text,\r\n                        completed: false,\r\n                        todo: todoId\r\n                        \r\n                    }\r\n                    )\r\n\r\n                }\r\n                \r\n        },\r\n        deleteTask: (state, action:PayloadAction<{todoId:string, taskId: string}>) => {\r\n\r\n            const {todoId, taskId} = action.payload\r\n\r\n            const getTodo = state.todos.find((todo:Todo) => todo._id === todoId)\r\n\r\n            if (getTodo) {\r\n                getTodo.tasks = getTodo.tasks.filter((task:Task) => task._id !== taskId)\r\n                \r\n            }\r\n        },\r\n            updateTodoTitle: (state, action:PayloadAction<{todoId:string, newTitle:string}>) => {\r\n                const {todoId, newTitle} = action.payload\r\n                const getTodo = state.todos.find((todo:Todo) => todo._id === todoId)\r\n\r\n                if (getTodo) {\r\n                    getTodo.title = newTitle\r\n                }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n})\r\n\r\nexport const { setTodos, addTodo, deleteTodo, updateTask, addTask, deleteTask, updateTodoTitle } = todosSlice.actions\r\n\r\nexport default todosSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}