{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const todosApi = createApi({\n  reducerPath: 'todosApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000/',\n    prepareHeaders: headers => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        headers.set('authorization', `Bearer ${token}`);\n      }\n      return headers;\n    }\n  }),\n  endpoints: builder => ({\n    getTodos: builder.query({\n      query: () => 'get-todos'\n    }),\n    deleteTodoMutation: builder.mutation({\n      query: _ref => {\n        let {\n          todoId\n        } = _ref;\n        return {\n          url: `delete-todo/${todoId}`,\n          method: 'DELETE'\n        };\n      }\n    }),\n    deleteTask: builder.mutation({\n      query: _ref2 => {\n        let {\n          todo,\n          taskId\n        } = _ref2;\n        return {\n          url: `delete-task/todo/${todo}/task/${taskId}`,\n          method: 'DELETE'\n        };\n      }\n    }),\n    createTodo: builder.mutation({\n      query: newTodo => ({\n        url: 'add-todo',\n        method: 'POST',\n        body: newTodo\n      })\n    }),\n    updateTaskStatus: builder.mutation({\n      query: _ref3 => {\n        let {\n          todo,\n          taskId,\n          completed\n        } = _ref3;\n        return {\n          url: `update-task-status/todo/${todo}/task/${taskId}`,\n          method: 'PUT',\n          body: {\n            completed: completed\n          }\n        };\n      }\n    }),\n    updateTodoTitle: builder.mutation({\n      query: _ref4 => {\n        let {\n          todoId,\n          newTitle\n        } = _ref4;\n        return {\n          url: `update-todo-title/${todoId}`,\n          method: 'PUT',\n          body: {\n            newTitle\n          }\n        };\n      }\n    }),\n    addTask: builder.mutation({\n      query: _ref5 => {\n        let {\n          todoId,\n          newTask\n        } = _ref5;\n        return {\n          url: `add-task/${todoId}`,\n          method: 'PUT',\n          body: {\n            text: newTask.text\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetTodosQuery,\n  useCreateTodoMutation,\n  useUpdateTaskStatusMutation,\n  useUpdateTodoTitleMutation,\n  useAddTaskMutation,\n  useDeleteTaskMutation,\n  useDeleteTodoMutationMutation\n} = todosApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","todosApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","endpoints","builder","getTodos","query","deleteTodoMutation","mutation","_ref","todoId","url","method","deleteTask","_ref2","todo","taskId","createTodo","newTodo","body","updateTaskStatus","_ref3","completed","updateTodoTitle","_ref4","newTitle","addTask","_ref5","newTask","text","useGetTodosQuery","useCreateTodoMutation","useUpdateTaskStatusMutation","useUpdateTodoTitleMutation","useAddTaskMutation","useDeleteTaskMutation","useDeleteTodoMutationMutation"],"sources":["C:/Users/Taha/Desktop/MERN-todo-case-project/frontend/src/api/todosApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { Todo} from '../types/Todo';\r\nimport { Task } from '../types/Task';\r\n\r\nexport const todosApi = createApi({\r\n  reducerPath: 'todosApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000/',\r\n    prepareHeaders: (headers) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            headers.set('authorization', `Bearer ${token}`);\r\n        }\r\n        return headers;\r\n        }\r\n\r\n},\r\n    \r\n  ),\r\n  endpoints: (builder) => ({\r\n    getTodos: builder.query<any, void>({\r\n      query: () => 'get-todos',\r\n\r\n      \r\n    }),\r\n    deleteTodoMutation: builder.mutation<Todo, {todoId:string}>({\r\n        query: ({todoId}) => ({\r\n            url: `delete-todo/${todoId}`,\r\n            method: 'DELETE'\r\n\r\n        })\r\n\r\n\r\n    }),\r\n\r\n    deleteTask: builder.mutation<Todo, {todoIs:string, taskId:string}>({\r\n        query: ({todo, taskId}) => ({\r\n            url: `delete-task/todo/${todo}/task/${taskId}`,\r\n            method: 'DELETE',\r\n\r\n\r\n        })\r\n    }),\r\n    createTodo: builder.mutation<Todo, Partial<Todo>>({\r\n      query: (newTodo) => ({\r\n        url: 'add-todo',\r\n        method: 'POST',\r\n        body: newTodo,\r\n      }),\r\n    }),\r\n    updateTaskStatus: builder.mutation<Todo, { todo: string, taskId: string, completed:boolean }>({\r\n      query: ({ todo, taskId, completed }) => ({\r\n        url: `update-task-status/todo/${todo}/task/${taskId}`,\r\n        method: 'PUT',\r\n        body : {completed: completed\r\n        \r\n        }\r\n      }),\r\n    }),\r\n    updateTodoTitle: builder.mutation<Todo, { todoId: string, newTitle: string }>({\r\n      query: ({ todoId, newTitle }) => ({\r\n        url: `update-todo-title/${todoId}`,\r\n        method: 'PUT',\r\n        body: { newTitle }, \r\n      }),\r\n    }),\r\n    addTask: builder.mutation<Todo, { todoId: string, newTask: Task }>({\r\n      query: ({ todoId, newTask }) => ({\r\n        url: `add-task/${todoId}`,\r\n        method: 'PUT',\r\n        body: {\r\n            text: newTask.text\r\n        }\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetTodosQuery, useCreateTodoMutation, useUpdateTaskStatusMutation, useUpdateTodoTitleMutation, useAddTaskMutation, useDeleteTaskMutation, useDeleteTodoMutationMutation } = todosApi;\r\n\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAIxE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE,wBAAwB;IAC3DC,cAAc,EAAGC,OAAO,IAAK;MACzB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACPD,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASH,KAAM,EAAC,CAAC;MACnD;MACA,OAAOD,OAAO;IACd;EAER,CAEE,CAAC;EACDK,SAAS,EAAGC,OAAO,KAAM;IACvBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAY;MACjCA,KAAK,EAAEA,CAAA,KAAM;IAGf,CAAC,CAAC;IACFC,kBAAkB,EAAEH,OAAO,CAACI,QAAQ,CAAwB;MACxDF,KAAK,EAAEG,IAAA;QAAA,IAAC;UAACC;QAAM,CAAC,GAAAD,IAAA;QAAA,OAAM;UAClBE,GAAG,EAAG,eAAcD,MAAO,EAAC;UAC5BE,MAAM,EAAE;QAEZ,CAAC;MAAA;IAGL,CAAC,CAAC;IAEFC,UAAU,EAAET,OAAO,CAACI,QAAQ,CAAuC;MAC/DF,KAAK,EAAEQ,KAAA;QAAA,IAAC;UAACC,IAAI;UAAEC;QAAM,CAAC,GAAAF,KAAA;QAAA,OAAM;UACxBH,GAAG,EAAG,oBAAmBI,IAAK,SAAQC,MAAO,EAAC;UAC9CJ,MAAM,EAAE;QAGZ,CAAC;MAAA;IACL,CAAC,CAAC;IACFK,UAAU,EAAEb,OAAO,CAACI,QAAQ,CAAsB;MAChDF,KAAK,EAAGY,OAAO,KAAM;QACnBP,GAAG,EAAE,UAAU;QACfC,MAAM,EAAE,MAAM;QACdO,IAAI,EAAED;MACR,CAAC;IACH,CAAC,CAAC;IACFE,gBAAgB,EAAEhB,OAAO,CAACI,QAAQ,CAA4D;MAC5FF,KAAK,EAAEe,KAAA;QAAA,IAAC;UAAEN,IAAI;UAAEC,MAAM;UAAEM;QAAU,CAAC,GAAAD,KAAA;QAAA,OAAM;UACvCV,GAAG,EAAG,2BAA0BI,IAAK,SAAQC,MAAO,EAAC;UACrDJ,MAAM,EAAE,KAAK;UACbO,IAAI,EAAG;YAACG,SAAS,EAAEA;UAEnB;QACF,CAAC;MAAA;IACH,CAAC,CAAC;IACFC,eAAe,EAAEnB,OAAO,CAACI,QAAQ,CAA6C;MAC5EF,KAAK,EAAEkB,KAAA;QAAA,IAAC;UAAEd,MAAM;UAAEe;QAAS,CAAC,GAAAD,KAAA;QAAA,OAAM;UAChCb,GAAG,EAAG,qBAAoBD,MAAO,EAAC;UAClCE,MAAM,EAAE,KAAK;UACbO,IAAI,EAAE;YAAEM;UAAS;QACnB,CAAC;MAAA;IACH,CAAC,CAAC;IACFC,OAAO,EAAEtB,OAAO,CAACI,QAAQ,CAA0C;MACjEF,KAAK,EAAEqB,KAAA;QAAA,IAAC;UAAEjB,MAAM;UAAEkB;QAAQ,CAAC,GAAAD,KAAA;QAAA,OAAM;UAC/BhB,GAAG,EAAG,YAAWD,MAAO,EAAC;UACzBE,MAAM,EAAE,KAAK;UACbO,IAAI,EAAE;YACFU,IAAI,EAAED,OAAO,CAACC;UAClB;QACF,CAAC;MAAA;IACH,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,gBAAgB;EAAEC,qBAAqB;EAAEC,2BAA2B;EAAEC,0BAA0B;EAAEC,kBAAkB;EAAEC,qBAAqB;EAAEC;AAA8B,CAAC,GAAG3C,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}