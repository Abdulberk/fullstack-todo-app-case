{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Taha\\\\Desktop\\\\MERN-todo-case-project\\\\frontend\\\\src\\\\components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Check from \"./Check\";\nimport { useUpdateTaskStatusMutation } from \"../api/todosApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RowContainer = styled.div`\n  width: 100%;\n  height: 30px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  gap: 5px;\n`;\n_c = RowContainer;\nconst Row = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n`;\n_c2 = Row;\nconst RowIcon = styled.div`\n  width: 30px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n_c3 = RowIcon;\nconst RowText = styled.div`\n  width: calc(100% - 20px);\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  font-size: 14px;\n  font-family: \"Poppins\", sans-serif;\n  font-weight: 400;\n  color: #9599b5;\n  text-decoration: ${props => props.completed ? \"line-through\" : \"none\"};\n`;\n_c4 = RowText;\nconst TaskList = _ref => {\n  _s();\n  let {\n    tasks\n  } = _ref;\n  const [allTasks, setAllTasks] = useState(tasks);\n  const [updateTaskStatus] = useUpdateTaskStatusMutation();\n  const handleTaskCheck = async (todo, taskId, completed) => {\n    await updateTaskStatus({\n      todo,\n      taskId,\n      completed\n    }).unwrap().then(res => {\n      const updatedTask = res.updatedTodoTask;\n      const updatedTasks = allTasks.map(task => {\n        if (task._id === updatedTask._id) {\n          return updatedTask;\n        }\n        return task;\n      });\n      setAllTasks(updatedTasks);\n      console.log(allTasks);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(RowContainer, {\n    children: allTasks.map(task => /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(RowIcon, {\n        children: /*#__PURE__*/_jsxDEV(Check, {\n          completed: task.completed,\n          onChecked: () => handleTaskCheck(task.todo, task._id, task.completed)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowText, {\n        completed: task.completed,\n        children: task.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, task._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"EPMzOOhDyClh6BUJNxSIQuxh4oI=\", false, function () {\n  return [useUpdateTaskStatusMutation];\n});\n_c5 = TaskList;\nexport default TaskList;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"RowContainer\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"RowIcon\");\n$RefreshReg$(_c4, \"RowText\");\n$RefreshReg$(_c5, \"TaskList\");","map":{"version":3,"names":["React","useState","styled","Check","useUpdateTaskStatusMutation","jsxDEV","_jsxDEV","RowContainer","div","_c","Row","_c2","RowIcon","_c3","RowText","props","completed","_c4","TaskList","_ref","_s","tasks","allTasks","setAllTasks","updateTaskStatus","handleTaskCheck","todo","taskId","unwrap","then","res","updatedTask","updatedTodoTask","updatedTasks","map","task","_id","console","log","catch","err","children","onChecked","fileName","_jsxFileName","lineNumber","columnNumber","text","_c5","$RefreshReg$"],"sources":["C:/Users/Taha/Desktop/MERN-todo-case-project/frontend/src/components/TaskList.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Task } from \"../types/Task\";\r\nimport Check from \"./Check\";\r\nimport { useUpdateTaskStatusMutation } from \"../api/todosApi\";\r\n\r\nconst RowContainer = styled.div`\r\n  width: 100%;\r\n  height: 30px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  gap: 10px;\r\n`;\r\n\r\nconst RowIcon = styled.div`\r\n  width: 30px;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst RowText = styled.div<{ completed: boolean }>`\r\n  width: calc(100% - 20px);\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  font-family: \"Poppins\", sans-serif;\r\n  font-weight: 400;\r\n  color: #9599b5;\r\n  text-decoration: ${(props) => (props.completed ? \"line-through\" : \"none\")};\r\n`;\r\n\r\ninterface TaskListProps {\r\n  tasks: Task[];\r\n}\r\n\r\nconst TaskList: React.FC<TaskListProps> = ({ tasks }) => {\r\n  const [allTasks, setAllTasks] = useState<Task[]>(tasks);\r\n\r\n\r\n\r\n\r\n  const [updateTaskStatus] = useUpdateTaskStatusMutation();\r\n\r\n\r\n\r\n  const handleTaskCheck = async (todo: string, taskId: string, completed: boolean) => {\r\n    await updateTaskStatus({ todo, taskId, completed })\r\n      .unwrap()\r\n      .then((res) => {\r\n       const updatedTask = res.updatedTodoTask;\r\n       const updatedTasks = allTasks.map((task) => {\r\n          if (task._id === updatedTask._id) {\r\n            return updatedTask;\r\n          } \r\n          return task;\r\n        });\r\n        setAllTasks(updatedTasks)\r\n        console.log(allTasks)\r\n\r\n;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <RowContainer>\r\n      {allTasks.map((task) => (\r\n        <Row key={task._id}>\r\n          <RowIcon>\r\n            <Check\r\n              completed={task.completed}\r\n              onChecked={() => handleTaskCheck(task.todo, task._id, task.completed)}\r\n            />\r\n          </RowIcon>\r\n          <RowText completed={task.completed}>{task.text}</RowText>\r\n        </Row>\r\n      ))}\r\n    </RowContainer>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}